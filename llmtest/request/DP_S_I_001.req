[기능] Design Pattern (디자인 패턴)
[길이] Short (짧은 요청)
[복잡도] Intermediate (중급)
[설명] 옵저버 패턴을 사용한 이벤트 처리 시스템 구현

다음 옵저버 패턴을 사용한 이벤트 처리 시스템을 구현해줘:
```java
public interface EventListener {
    void onEvent(Event event);
}

public class Event {
    private String type;
    private Object data;
    private long timestamp;
    
    public Event(String type, Object data) {
        this.type = type;
        this.data = data;
        this.timestamp = System.currentTimeMillis();
    }
    
    // Getters
}

public class EventManager {
    private List<EventListener> listeners;
    
    public EventManager() {
        this.listeners = new ArrayList<>();
    }
    
    public void addListener(EventListener listener) {
        listeners.add(listener);
    }
    
    public void removeListener(EventListener listener) {
        listeners.remove(listener);
    }
    
    public void notifyListeners(Event event) {
        for (EventListener listener : listeners) {
            listener.onEvent(event);
        }
    }
}

public class LoggingEventListener implements EventListener {
    @Override
    public void onEvent(Event event) {
        System.out.println("Event received: " + event);
    }
}

public class EmailEventListener implements EventListener {
    @Override
    public void onEvent(Event event) {
        // 이메일 발송 로직
    }
} 