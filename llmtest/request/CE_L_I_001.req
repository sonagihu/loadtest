[기능] Code Explanation (코드 설명)
[길이] Long (긴 요청)
[복잡도] Intermediate (중간)
[설명] 여러 디자인 패턴이 적용된 파일 처리 시스템의 코드 설명

다음 파일 처리 시스템에서 사용된 디자인 패턴들과 각 클래스의 역할을 설명해줘:
```java
// Strategy Pattern
public interface FileProcessor {
    void process(File file);
}

public class TextFileProcessor implements FileProcessor {
    @Override
    public void process(File file) {
        // 텍스트 파일 처리
    }
}

public class ImageFileProcessor implements FileProcessor {
    @Override
    public void process(File file) {
        // 이미지 파일 처리
    }
}

// Decorator Pattern
public abstract class FileProcessorDecorator implements FileProcessor {
    protected FileProcessor processor;
    
    public FileProcessorDecorator(FileProcessor processor) {
        this.processor = processor;
    }
}

public class CompressionDecorator extends FileProcessorDecorator {
    @Override
    public void process(File file) {
        // 압축 처리 후 원래 처리
        processor.process(file);
    }
}

// Factory Pattern
public class FileProcessorFactory {
    public static FileProcessor createProcessor(String fileType) {
        switch (fileType) {
            case "txt": return new TextFileProcessor();
            case "jpg": return new ImageFileProcessor();
            default: throw new IllegalArgumentException();
        }
    }
}

// Observer Pattern
public interface ProcessingObserver {
    void onProgress(int progress);
    void onComplete();
}

public class FileProcessingManager {
    private List<ProcessingObserver> observers = new ArrayList<>();
    
    public void addObserver(ProcessingObserver observer) {
        observers.add(observer);
    }
    
    public void processFile(File file) {
        // 파일 처리 및 진행 상황 알림
    }
}
``` 