/**
 * 암호화 관련 유틸리티 클래스
 */
public class EncryptionUtils {
    private static final String ALGORITHM = "AES/CBC/PKCS5Padding";
    private static final String KEY_ALGORITHM = "AES";
    private static final int KEY_SIZE = 256;
    
    /**
     * 데이터를 암호화하는 메소드
     * @param data 암호화할 데이터
     * @param key 암호화에 사용할 키
     * @return 암호화된 데이터
     * @throws Exception 암호화 과정에서 발생할 수 있는 예외
     */
    public String encrypt(String data, String key) throws Exception {
        SecretKey secretKey = generateKey(key);
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encryptedBytes = cipher.doFinal(data.getBytes());
        return Base64.getEncoder().encodeToString(encryptedBytes);
    }
    
    /**
     * 암호화된 데이터를 복호화하는 메소드
     * @param encryptedData 복호화할 암호화된 데이터
     * @param key 복호화에 사용할 키
     * @return 복호화된 데이터
     * @throws Exception 복호화 과정에서 발생할 수 있는 예외
     */
    public String decrypt(String encryptedData, String key) throws Exception {
        SecretKey secretKey = generateKey(key);
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedData));
        return new String(decryptedBytes);
    }
    
    /**
     * 키를 생성하는 메소드
     * @param key 생성할 키
     * @return 생성된 SecretKey
     * @throws Exception 키 생성 과정에서 발생할 수 있는 예외
     */
    private SecretKey generateKey(String key) throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest(key.getBytes("UTF-8"));
        return new SecretKeySpec(hash, KEY_ALGORITHM);
    }
    
    /**
     * 데이터의 SHA-256 해시를 생성하는 메소드
     * @param data 해시를 생성할 데이터
     * @return 생성된 해시
     * @throws Exception 해시 생성 과정에서 발생할 수 있는 예외
     */
    public String generateHash(String data) throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest(data.getBytes("UTF-8"));
        return Base64.getEncoder().encodeToString(hash);
    }
} 