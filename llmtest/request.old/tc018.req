/**
 * 파일 처리를 위한 클래스입니다.
 */
public class FileProcessor {
    private static final int BUFFER_SIZE = 8192;
    
    /**
     * 파일을 읽어서 각 줄을 처리하는 메소드입니다.
     *
     * @param filePath 읽을 파일의 경로
     * @param callback 각 줄을 처리하는 콜백 객체
     * @throws IOException 파일을 읽거나 처리하는 도중에 발생할 수 있는 입출력 예외
     */
    public void processFile(String filePath, FileProcessorCallback callback) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath), BUFFER_SIZE)) {
            String line;
            while ((line = reader.readLine()) != null) {
                callback.processLine(line);
            }
        }
    }
    
    /**
     * 여러 줄의 문자열을 파일에 쓰는 메소드입니다.
     *
     * @param filePath 쓸 파일의 경로
     * @param lines 쓸 문자열 리스트
     * @throws IOException 파일을 쓰는 도중에 발생할 수 있는 입출력 예외
     */
    public void writeToFile(String filePath, List<String> lines) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath), BUFFER_SIZE)) {
            for (String line : lines) {
                writer.write(line);
                writer.newLine();
            }
        }
    }
    
    /**
     * 파일에서 패턴을 검색하는 메소드입니다.
     *
     * @param filePath 검색할 파일의 경로
     * @param pattern 검색할 패턴
     * @return 일치하는 모든 줄을 포함한 리스트
     * @throws IOException 파일을 읽거나 처리하는 도중에 발생할 수 있는 입출력 예외
     */
    public List<String> searchInFile(String filePath, String pattern) throws IOException {
        List<String> matches = new ArrayList<>();
        Pattern regex = Pattern.compile(pattern);
        
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath), BUFFER_SIZE)) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (regex.matcher(line).find()) {
                    matches.add(line);
                }
            }
        }
        
        return matches;
    }
} 